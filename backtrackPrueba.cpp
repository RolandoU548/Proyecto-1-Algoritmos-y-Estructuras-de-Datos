#include <iostream>
using namespace std;
const string dict[77][6] =
    {
        {"0", "10000110101", "011010", "100111", "111001", "010110"},
        {"1", "11111100100", "000100", "000000", "000001", "000010"},
        {"2", "10010100010", "011000", "100101", "000111", "000011"},
        {"3", "10100100010", "110000", "111000", "001001", "010110"},
        {"4", "01010010010", "000001", "101010", "110000", "111010"},
        {"5", "10100100001", "111011", "110010", "001001", "010110"},
        {"6", "10000111110", "000110", "100000", "101001", "010110"},
        {"7", "10000000100", "110000", "110110", "010101", "000000"},
        {"8", "10000101110", "011010", "100101", "101001", "010110"},
        {"9", "10000101111", "011010", "100101", "000001", "011000"},
        {":", "01111000000", "000101", "000000", "010100", "000000"},
        {";", "01111000000", "000101", "000000", "010001", "000000"},
        {"<", "01001010000", "000001", "100000", "010000", "000010"},
        {"=", "00110000000", "000011", "000011", "110000", "110000"},
        {">", "01001000001", "010000", "000010", "000001", "100000"},
        {"?", "10010100010", "011000", "100101", "000000", "000000"},
        {"@", "10011101101", "011000", "100101", "101001", "010110"},
        {"A", "10010010001", "011010", "100101", "111010", "110101"},
        {"B", "10000111110", "111010", "100101", "101011", "010110"},
        {"C", "10000110000", "011010", "100100", "101001", "000110"},
        {"D", "10000110001", "111010", "001001", "101011", "011000"},
        {"E", "10000111110", "111010", "110000", "101011", "000011"},
        {"F", "10000011110", "111010", "110000", "101010", "000000"},
        {"G", "10000110111", "011010", "100100", "101001", "010111"},
        {"H", "00000011111", "101010", "010101", "101010", "010101"},
        {"I", "11111100100", "010000", "100000", "000001", "000010"},
        {"J", "10000100010", "000000", "111010", "001001", "101000"},
        {"K", "00110011000", "101010", "011000", "101010", "001001"},
        {"L", "00000110000", "101010", "000000", "101011", "000011"},
        {"M", "00100010101", "101110", "011101", "101010", "010101"},
        {"N", "00000010101", "101011", "010101", "101010", "110101"},
        {"O", "10000110001", "011010", "100101", "101001", "010110"},
        {"P", "10000011110", "111010", "100101", "101010", "000000"},
        {"Q", "10010110001", "011010", "100101", "101001", "011001"},
        {"R", "10010011110", "111010", "100101", "101010", "001001"},
        {"S", "10000101110", "011010", "110000", "000011", "010110"},
        {"T", "11111100100", "110000", "110000", "000000", "000000"},
        {"U", "00000110001", "101010", "010101", "101001", "010110"},
        {"V", "00000110001", "101010", "010101", "100100", "011000"},
        {"W", "00011010101", "101010", "010101", "101001", "010110"},
        {"X", "00000000100", "101001", "010110", "011010", "100101"},
        {"Y", "00011101010", "101010", "010101", "000000", "000000"},
        {"Z", "10000100100", "110000", "110110", "011011", "000011"},
        {"[", "10000101000", "010101", "100000", "010101", "000010"},
        {"/", "00000000100", "001001", "000000", "000000", "100100"},
        {"]", "10000100010", "010000", "101010", "000001", "101010"},
        {"_", "00000100000", "000000", "000000", "000011", "000011"},
        {"a", "00110100001", "000001", "000010", "011001", "110111"},
        {"b", "00000111110", "101010", "000000", "101011", "010110"},
        {"c", "00100110000", "000001", "000011", "101001", "000011"},
        {"d", "00000101111", "000000", "010101", "101001", "010111"},
        {"e", "00110110001", "000001", "000010", "111001", "110011"},
        {"f", "01111101110", "000000", "100100", "000000", "000000"},
        {"g", "00110110001", "000001", "000011", "010011", "110110"},
        {"h", "00000011110", "101010", "000000", "101010", "010101"},
        {"i", "01011100100", "000000", "000000", "000000", "000000"},
        {"j", "00000100010", "000000", "100010", "001001", "101000"},
        {"k", "00010001010", "010101", "000001", "010101", "001001"},
        {"l", "11111100100", "010000", "000000", "000001", "000010"},
        {"m", "00011010101", "000011", "000011", "101010", "010101"},
        {"n", "00100011001", "000010", "000010", "101010", "010101"},
        {"o", "00100110001", "000001", "000010", "101001", "010110"},
        {"p", "00110010001", "000011", "000010", "111010", "100000"},
        {"q", "00110010001", "000001", "000011", "010000", "110101"},
        {"r", "00100011001", "000010", "000010", "101010", "000000"},
        {"s", "00110110000", "000001", "000011", "010011", "100110"},
        {"t", "11111000100", "000011", "000011", "000000", "000110"},
        {"u", "00000110001", "000010", "000001", "101001", "010110"},
        {"v", "00000110001", "000010", "000001", "100100", "011000"},
        {"w", "00011010001", "000010", "000001", "101001", "010110"},
        {"x", "00010001010", "000010", "000001", "000110", "001001"},
        {"y", "00011001010", "000010", "000001", "000001", "000000"},
        {"z", "00110100010", "000011", "000011", "000111", "000011"},
        {"{", "10000110000", "000101", "100000", "010100", "000010"},
        {"|", "11111100100", "000000", "000000", "000000", "000000"},
        {"}", "10000100001", "010000", "001010", "000001", "101000"},
        {"â–ˆ", "10000110001", "111010", "110101", "101011", "010111"},
};
// index: cantidad de letras ya completadas
// caracteres: cantidad de cruces o letras que hay que completar. HACK; caracteres =4;
// indiceLetra: numero de letra que se esta buscando.
// numeroSegmento: Indica que segmento se esta buscando. El primero, segundo, tercero o cuarto. Deberia reiniciarse cada vez se completa un caracter o letra.

string posiblesSegmentos[4];

string identificarLetra(string cruz)
{
    for (int i = 0; i < 77; i++)
    {
        if (dict[i][1] == cruz && dict[i][2] == posiblesSegmentos[0] &&
            dict[i][3] == posiblesSegmentos[1] && dict[i][4] == posiblesSegmentos[2] &&
            dict[i][5] == posiblesSegmentos[3])
        {
            return dict[i][0];
        }
    }
    return "";
}

bool coincideCruz(string segmento, string cruz, int numeroSegmento)
{
    for (int i = 0; i < 77; i++)
    {
        if (dict[i][1] == cruz)
            if (dict[i][numeroSegmento + 2] == segmento)
                return true;
    }
    return false;
}

void back(string segmentos[], string cruces[], int numeroSegmento, int cantidadSegmentos, bool segmentosDisponibles[], int caracteres, int index, string palabra)
{
    if (index == caracteres)
    {
        cout << palabra << endl;
        return;
    }
    for (int i = 0; i < cantidadSegmentos; i++)
    {
        if (segmentosDisponibles[i] && coincideCruz(segmentos[i], cruces[index], numeroSegmento))
        {
            segmentosDisponibles[i] == false;
            posiblesSegmentos[numeroSegmento] = segmentos[i];
            if (numeroSegmento == 3)
            {
                back(segmentos, cruces, 0, cantidadSegmentos, segmentosDisponibles, caracteres, index + 1, palabra + identificarLetra(cruces[index]));
            }
            else
            {
                back(segmentos, cruces, numeroSegmento + 1, cantidadSegmentos, segmentosDisponibles, caracteres, index, palabra);
            }
            segmentosDisponibles[i] == true;
        }
    }
}

int main()
{
    string cruces[4] = {
        "00000011111",
        "10010010001",
        "10000110000",
        "00110011000",
    };
    int cantidadCruces = 4;
    string segmentos[16] = {
        "010101",
        "011010",
        "100101",
        "111010",
        "110101",
        "011010",
        "100100",
        "101001",
        "000110",
        "101010",
        "011000",
        "101010",
        "001001",
        "101010",
        "010101",
        "101010",
    };
    bool segmentosDisponibles[16] = {true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true};
    int cantidadSegmentos = 16;
    back(segmentos, cruces, 0, cantidadSegmentos, segmentosDisponibles, cantidadCruces, 0, "");
    return 0;
}